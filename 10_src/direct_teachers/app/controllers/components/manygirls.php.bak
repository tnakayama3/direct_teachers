<?php
class ManygirlsComponent extends Object {
	function initialize(&$controller) {
		$this->controller =& $controller;
	}

	#Return game user data
	function get_game_user_data($user_id) {
		$game_user_data = array();
		$game_user_data = $this->controller->MgsUser->find('first', array('conditions' => array('MgsUser.user_id' => $user_id)));
		return $game_user_data;
	}

	#Return all of user's girls data
	function get_detail_girls_data($user_id, $stage_id) {
		$girls_detail_data = array();
		$girl_masters = $this->controller->MgsGirlMaster->find('all', array('conditions' => array('MgsGirlMaster.stage_id' => $stage_id)));
		$girls_data = $this->controller->MgsGirlsData->find('all', array(
				'conditions' => array(
					'MgsGirlsData.owner_user_id' => $user_id,
					'MgsGirlsData.closed_flg' => 0, 
				)));
		foreach($girls_data as $girl_data) {
			$girl_detail_data = array();
			foreach($girl_masters as $girl_master) {
				if($girl_master['MgsGirlMaster']['id'] == $girl_data['MgsGirlsData']['girl_id']) {
					#Store master data
					$girl_detail_data['girl_id']           =  $girl_master['MgsGirlMaster']['id'];
					$girl_detail_data['stage_id']          =  $girl_master['MgsGirlMaster']['stage_id'];
					$girl_detail_data['princess_flg']      =  $girl_master['MgsGirlMaster']['princess_flg'];
					$girl_detail_data['name']              =  $girl_master['MgsGirlMaster']['name'];
					$girl_detail_data['type']              =  $girl_master['MgsGirlMaster']['type'];
					$girl_detail_data['required_point']    =  $girl_master['MgsGirlMaster']['required_point'];
					$girl_detail_data['favorite_item_id1'] =  $girl_master['MgsGirlMaster']['favorite_item_id1'];
					$girl_detail_data['favorite_item_id2'] =  $girl_master['MgsGirlMaster']['favorite_item_id2'];
					$girl_detail_data['favorite_item_id3'] =  $girl_master['MgsGirlMaster']['favorite_item_id3'];
					$girl_detail_data['favorite_item_id4'] =  $girl_master['MgsGirlMaster']['favorite_item_id4'];
					$girl_detail_data['favorite_item_id5'] =  $girl_master['MgsGirlMaster']['favorite_item_id5'];

					#Store living data
					$girl_detail_data['player_user_id']        =  $girl_data['MgsGirlsData']['player_user_id'];
					$girl_detail_data['owner_user_id']         =  $girl_data['MgsGirlsData']['owner_user_id'];
					$girl_detail_data['current_date_id']       =  $girl_data['MgsGirlsData']['current_date_id'];
					$girl_detail_data['current_date_precent']  =  $girl_data['MgsGirlsData']['current_date_percent'];
					$girl_detail_data['point']                 =  $girl_data['MgsGirlsData']['point'];
					$girl_detail_data['point_updated']         =  $girl_data['MgsGirlsData']['point_updated'];
					$girl_detail_data['fav_item_given_date']   =  $girl_data['MgsGirlsData']['fav_item_given_date'];
					$girl_detail_data['fav_item_given_id']     =  $girl_data['MgsGirlsData']['fav_item_given_date'];
					$girl_detail_data['guard_num']             =  $girl_data['MgsGirlsData']['guard_num'];

					#Other detailed information
					$girl_detail_data['point_percent'] = sqrt($girl_detail_data['point'] / $girl_detail_data['required_point']);
					$girl_detail_data['face_id'] = $this->get_girl_face_type($girl_detail_data['point_percent']);
					$girl_comments = $this->controller->MgsGirlCommentMaster->find('all', array('conditions' => array(
						'MgsGirlCommentMaster.girl_id' => $girl_detail_data['girl_id'],
						'MgsGirlCommentMaster.face_id' => $girl_detail_data['face_id'],
						)));
					$girl_comment_rand_key = array_rand($girl_comments);
					$girl_detail_data['comment'] = $girl_comments[$girl_comment_rand_key]['MgsGirlCommentMaster']['comment'];
					array_push($girls_detail_data, $girl_detail_data);
				}
				
			}
		}
		usort($girls_detail_data, array($this, "_comp_girl_by_point"));
		return $girls_detail_data;
	}

	#Return face type of the girl based on point percentage
	function get_girl_face_type($point_percent) {
		$face_type;
		$girl_face_types = array();
 		$girl_face_types =  Configure::read('GirlFaceType');
		ksort($girl_face_types);
		$buttom_value = -1;
		foreach($girl_face_types as $key => $value) {
			if($buttom_value < $point_percent && $point_percent <= $value) {
				$face_type = $key;
				$buttom_value = $value;
			}
		}
		return $face_type;
	}

	#Return top point girls of each types of girls
	#It would be used on top page
	function get_top_girls_data($girls_detail_data) {
		$top_girls_data = array();
		for($i=1; $i<= Configure::read('girls_type_num'); $i++) {
			foreach($girls_detail_data as $girl_detail_data) {
				if($girl_detail_data['type'] == $i) {
					$top_girls_data[$i] = $girl_detail_data;	
				}
			}
		}
		return $top_girls_data;
	}

	#Return girl data
	function get_girl_data($girl_data_id) {
		$girl_data = array();
		$girl_data = $this->controller->MgsGirlsData->find('first', array('conditions' => array('MgsGirlsData.id' => $girl_data_id)));
		$girl_data = $this->controller->MgsGirlsData->find('first', array('conditions' => array('MgsGirlsData.id' => $girl_data_id)));
		return $game_user_data;
	}



	function _comp_girl_by_point($a, $b) {
		if($a['point'] > $a['point']) {
			return 1;
		}elseif($a['point'] < $a['point']) {
			return -1;
		} else {
			return 0;
		}
		return 0;
	}
}
?>
